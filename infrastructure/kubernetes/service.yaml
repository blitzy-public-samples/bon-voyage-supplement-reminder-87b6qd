---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: supplement-reminder
  labels:
    app: supplement-reminder
    tier: backend
    environment: production
  annotations:
    kubernetes.io/change-cause: "Initial service configuration for supplement reminder application"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: supplement-reminder
    tier: backend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3000
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: supplement-reminder
  labels:
    app: supplement-reminder
    tier: frontend
    environment: production
  annotations:
    kubernetes.io/change-cause: "Initial service configuration for supplement reminder application"
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: supplement-reminder
    tier: frontend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
  sessionAffinity: None

---
# Additional configuration notes:
# - Services use the default round-robin load balancing provided by Kubernetes
# - Session affinity is explicitly set to None for clarity
# - Service discovery method: DNS
# - Service naming convention: <service-name>.<namespace>.svc.cluster.local

# Security considerations:
# - Implement Kubernetes Network Policies to restrict traffic between services
# - Ensure appropriate service accounts are associated with the pods these services target
# - Consider using mTLS for service-to-service communication

# Load balancing:
# The ClusterIP service type is used for internal communication within the cluster.
# For external access, an Ingress resource (defined in ingress.yaml) should be used.

# Scalability:
# These service definitions support the scalability of the backend and frontend deployments
# by load balancing across multiple pod replicas.

# Monitoring:
# Prometheus annotations have been added to enable metrics scraping for both services.

# Health checks:
# Implement readiness and liveness probes in the corresponding Deployment resources
# to ensure proper health checking and traffic routing.

# Version control:
# Use labels or annotations to track service versions for easier rollbacks and updates.

# Resource management:
# Define resource requests and limits in the Deployment resources to ensure
# proper scheduling and prevent resource contention.

# Networking:
# Consider implementing Istio or another service mesh for advanced traffic management,
# security, and observability features.

# Logging:
# Ensure that logs from these services are collected and shipped to a centralized
# logging system for easier troubleshooting and analysis.

# Backup and Disaster Recovery:
# Implement regular backups of any stateful components and have a disaster recovery plan in place.

# Compliance:
# Ensure that these service configurations comply with any relevant industry standards
# or regulations (e.g., HIPAA, GDPR) if applicable to your use case.