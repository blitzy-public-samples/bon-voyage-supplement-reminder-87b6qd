# Kubernetes Secret configuration for storing sensitive data for the supplement reminder application
# This file addresses the following requirements:
# - Data Security (8. SECURITY CONSIDERATIONS/8.2 DATA SECURITY)
# - Containerization and Orchestration (9. INFRASTRUCTURE/9.3 CONTAINERIZATION, 9.4 ORCHESTRATION)

apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: supplement-reminder
  labels:
    app: supplement-reminder
    component: database
  annotations:
    kubernetes.io/change-cause: "Initial Secret configuration for supplement reminder application"
type: Opaque
data:
  database-url: ${BASE64_ENCODED_DATABASE_URL}
---
apiVersion: v1
kind: Secret
metadata:
  name: sms-secrets
  namespace: supplement-reminder
  labels:
    app: supplement-reminder
    component: sms
  annotations:
    kubernetes.io/change-cause: "Initial Secret configuration for supplement reminder application"
type: Opaque
data:
  api-key: ${BASE64_ENCODED_SMS_API_KEY}

# Security considerations:
# - Kubernetes automatically encrypts Secret data at rest
# - Use RBAC (Role-Based Access Control) to limit access to Secrets only to the necessary service accounts and pods
# - Implement a process for regular rotation of secret values, especially for API keys and database credentials
# - Enable encryption for etcd, where Kubernetes stores its objects including Secrets

# Best practices:
# - Never commit actual secret values to version control
# - Use a secrets management system like HashiCorp Vault or AWS Secrets Manager for production environments
# - Consider using a tool like 'sealed-secrets' for encrypting secrets in Git repositories
# - Regularly audit and rotate secrets
# - Use namespaces to isolate resources and limit the blast radius in case of a breach
# - Implement network policies to restrict communication between pods and limit access to secrets

# Usage:
# These secrets are used in the backend-deployment as environment variables:
# - DATABASE_URL: Accessed using secretKeyRef with name "database-secrets" and key "database-url"
# - SMS_API_KEY: Accessed using secretKeyRef with name "sms-secrets" and key "api-key"

# Example of how to use these secrets in a deployment:
# 
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: backend
#   namespace: supplement-reminder
# spec:
#   template:
#     spec:
#       containers:
#       - name: backend
#         env:
#         - name: DATABASE_URL
#           valueFrom:
#             secretKeyRef:
#               name: database-secrets
#               key: database-url
#         - name: SMS_API_KEY
#           valueFrom:
#             secretKeyRef:
#               name: sms-secrets
#               key: api-key

# Note: Ensure that the deployment has the necessary RBAC permissions to access these secrets