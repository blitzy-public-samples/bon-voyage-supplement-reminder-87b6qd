name: Continuous Deployment

# Requirement addressed: Continuous Deployment
# Location: 9. INFRASTRUCTURE/9.5 CI/CD PIPELINE
# Description: Implement a robust CI/CD pipeline to automate the build, test, and deployment processes, ensuring rapid and reliable delivery of new features and bug fixes.

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CI: true
  NODE_VERSION: '16'
  AWS_REGION: 'us-west-2'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install frontend dependencies
        working-directory: src/frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: src/frontend
        run: npm test

      - name: Install backend dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run backend tests
        working-directory: src/backend
        run: npm test

  build-and-deploy:
    name: Build and Deploy to AWS ECS
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-

    - name: Install frontend dependencies
      working-directory: src/frontend
      run: npm ci

    - name: Build frontend
      working-directory: src/frontend
      run: npm run build

    - name: Install backend dependencies
      working-directory: src/backend
      run: npm ci

    - name: Build backend
      working-directory: src/backend
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: supplement-reminder-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f infrastructure/Dockerfile.frontend .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: supplement-reminder-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f infrastructure/Dockerfile.backend .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to AWS ECS
      env:
        ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
        ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
      run: |
        chmod +x infrastructure/scripts/deploy.sh
        ./infrastructure/scripts/deploy.sh

    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment to production succeeded!
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment to production failed!
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}